<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>Smallweb Blog</title>
    <link>http://localhost/</link>
    <atom:link href="http://localhost/feed.xml" rel="self" type="application/rss+xml"/>
    <description>The latest new from Smallweb</description>
    <lastBuildDate>Tue, 23 Jul 2024 09:11:36 GMT</lastBuildDate>
    <language>en</language>
    <generator>Lume v2.2.2</generator>
    <item>
      <title>Smallweb 0.12 - Publish and install flow for smallweb apps</title>
      <link>http://localhost/posts/v0.12/</link>
      <guid isPermaLink="false">http://localhost/posts/v0.12/</guid>
      <content:encoded>
        <![CDATA[<p>Smallweb 0.12 is out! And it's the first release since 0.8 where I do not feel the need to fondamentally change the routing system ðŸ˜….</p>
<p>But this is still a big release! And it even contains a few breaking changes (don't worry, they are easy to fix).</p>
<h2 id="smallweb-install%3A-a-new-convention-to-install-and-publish-smallweb-apps" tabindex="-1"><a href="http://localhost/posts/v0.12/#smallweb-install%3A-a-new-convention-to-install-and-publish-smallweb-apps" class="header-anchor"><code>smallweb install</code>: A new convention to install and publish smallweb apps</a></h2>
<p>Smallweb now includes a new <code>smallweb install</code> command to install smallweb apps from the web.</p>
<p>Smallweb apps work on top of github repositories. When you run</p>
<pre><code class="language-sh">smallweb install pomdtr/example-app ~/localhost/smallweb-app
</code></pre>
<p>smallweb will clone the <code>pomdtr/example-app</code> repository in the <code>~/localhost/smallweb-app</code> folder.</p>
<!-- more -->
<p>If the repository contains a <code>smallweb</code> branch, smallweb will checkout this branch. Otherwise, it will checkout the <code>main</code> branch.</p>
<p>This convention is really similar to how github pages work, and you can even repurposes github pages actions to build your smallweb app (see how this blog is built for an example).</p>
<p>Once an app is installed, you can use the <code>git</code> cli to manage them. For example, you can run <code>git pull</code> to update the app to the latest version, or <code>git checkout &lt;hash&gt;</code> to rollback to a previous version. Take a look to the <a href="https://github.com/pomdtr/smallweb-puller">pomdtr/smallweb-puller repository</a> for a simple way to trigger an app update from the ouside.</p>
<p>If you create a smallweb app, make sure to add the <code>smallweb-app</code> topic to your repository.</p>
<h2 id="smallweb-init-now-support-custom-templates" tabindex="-1"><a href="http://localhost/posts/v0.12/#smallweb-init-now-support-custom-templates" class="header-anchor"><code>smallweb init</code> now support custom templates</a></h2>
<p>The <code>smallweb init</code> was reworked to allow users to define custom templates from github. Smallweb templates are just github repositories with a <code>smallweb-template</code> topic.</p>
<p>The new command usage is:</p>
<pre><code class="language-ts">smallweb init [dir] [--template &lt;repo&gt;]
</code></pre>
<p>When you run <code>smallweb init example --template pomdtr/smallweb-template-astro</code>, smallweb will download the content of the <code>pomdtr/smallweb-template-astro</code> repository in the <code>example</code> folder (withouth creating a <code>.git</code> folder).</p>
<h2 id="crons-jobs-are-now-defined-as-http-requests" tabindex="-1"><a href="http://localhost/posts/v0.12/#crons-jobs-are-now-defined-as-http-requests" class="header-anchor">Crons jobs are now defined as HTTP requests</a></h2>
<p>Crons uses to be defined as shell commands:</p>
<pre><code class="language-json">{
    &quot;crons&quot;: [
        {
            &quot;schedule&quot;: &quot;0 0 * * *&quot;,
            &quot;command&quot;: &quot;deno&quot;,
            &quot;args&quot;: [&quot;run&quot;, &quot;--allow-net&quot;, &quot;https://example.com/cron.ts&quot;]
        }
    ]
}
</code></pre>
<p>This had a few limitations:</p>
<ul>
<li>crons did not respect the permissions of the app</li>
<li>getting access to the same Deno KV instance was tricky in some cases</li>
</ul>
<p>For these reasons (and in preparation for the upcoming hosted version of smallweb), crons are now defined as HTTP requests:</p>
<pre><code class="language-json">// smallweb.json
{
    &quot;crons&quot;: [
        {
            &quot;schedule&quot;: &quot;0 0 * * *&quot;,
            &quot;path&quot;: &quot;/refresh&quot;,
        }
    ]
}
</code></pre>
<p>This is the exact same API as <a href="https://vercel.com/guides/how-to-setup-cron-jobs-on-vercel">Vercel's cron</a>, so you can refer to their documentation for some examples of how to use it.</p>
<p>This also remove the need for the <code>smallweb cron trigger</code> command (as you can just go to <code>https://&lt;app&gt;/refresh</code> to trigger the cron).</p>
<p><code>smallweb cron list</code> was moved to <code>smallweb crons</code>.</p>
<h2 id="smallweb-open-has-new-flags" tabindex="-1"><a href="http://localhost/posts/v0.12/#smallweb-open-has-new-flags" class="header-anchor"><code>smallweb open</code> has new flags</a></h2>
<p>Smallweb open now supports opening both using the app name or dir:</p>
<pre><code class="language-sh"># open the react.localhost app
smallweb open --app react.localhost
# open the located at ~/localhost/react
smallweb open --dir ~/localhost/react
# open the current directory
smallweb open
</code></pre>
<h2 id="deno-kv-is-now-scoped-to-the-hostname" tabindex="-1"><a href="http://localhost/posts/v0.12/#deno-kv-is-now-scoped-to-the-hostname" class="header-anchor">Deno KV is now scoped to the hostname</a></h2>
<p>If you map multiple domains to the same app:</p>
<pre><code class="language-ts">{
    &quot;*-kv.smallweb.run&quot;: &quot;~/kv&quot; // maps both example-kv.smallweb.run and another-kv.smallweb.run to the same dir
}
</code></pre>
<p>And uses the default KV instance:</p>
<pre><code class="language-ts">// ~/kv/main.ts

const kv = await Deno.openKv()
</code></pre>
<p><code>example-kv.smallweb.run</code> and <code>another-kv.smallweb.run</code> will not share the same KV instance. This behavior will allow some cool new usecases (ex: preview deployments with distinct KV instances).</p>
<p>If you want to share a db between multiple hostnames, you can always specify a kv path in your code:</p>
<pre><code class="language-ts">const kv = await Deno.openKv({ path: &quot;./kv.db&quot; })
</code></pre>
<h2 id="what's-next%3F" tabindex="-1"><a href="http://localhost/posts/v0.12/#what's-next%3F" class="header-anchor">What's next?</a></h2>
<p>I really feel smallweb is in a good state right now, and I want to grow it's community. I just bought a new mike and as plan to record some videos to showcase smallweb features on Youtube and Twitter.</p>
<p>Improved logs are still a priority. I want to move logs to their own file instead of using stderr/stdout, and allow you to filter them by app/time by storing them as JSON lines.</p>
<p>Now that we have an efficient way to distribute and install apps, I want to port more apps to smallweb. I hope you'll help me with this one!</p>
<p>And finally, I plan to resume the work on smallweb sister project, smallbrowser.</p>
]]>
      </content:encoded>
      <pubDate>Tue, 23 Jul 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Smallweb 0.11 - Global config and new routing</title>
      <link>http://localhost/posts/v0.11/</link>
      <guid isPermaLink="false">http://localhost/posts/v0.11/</guid>
      <content:encoded>
        <![CDATA[<h2 id="a-new-(optional)-global-config" tabindex="-1"><a href="http://localhost/posts/v0.11/#a-new-(optional)-global-config" class="header-anchor">A new (optional) global config</a></h2>
<p>You can now configure the smallweb host, port, and other global settings in a <code>~/.config/smallweb/config.json</code> file.</p>
<p>Here is the implicit default configuration if the file does not exist:</p>
<pre><code class="language-json">{
    &quot;host&quot;: &quot;127.0.0.1&quot;,
    &quot;port&quot;: 7777,
    &quot;domains&quot;: {
        &quot;*.localhost&quot;: &quot;~/localhost/*&quot;
    },
    &quot;env&quot;: {
        &quot;DENO_TLS_CA_STORE&quot;: &quot;system&quot;
    }
}
</code></pre>
<!-- more -->
<p>Smallweb also supports the following environment variables:</p>
<ul>
<li><code>SMALLWEB_HOST</code></li>
<li><code>SMALLWEB_PORT</code></li>
</ul>
<h2 id="config-based-routing" tabindex="-1"><a href="http://localhost/posts/v0.11/#config-based-routing" class="header-anchor">Config Based Routing</a></h2>
<p>You might have noticed the new <code>domains</code> key in the global config.</p>
<p>It's part of a new routing system that allows you to map domains to folders in your filesystem.</p>
<p>For example, you can map:</p>
<ul>
<li><code>pomdtr.me</code> to <code>~/pomdtr.me</code>: All requests to <code>pomdtr.me</code> will be served from the <code>~/pomdtr.me</code> folder.</li>
<li><code>*.smallweb.run</code> to <code>~/smallweb.run/*</code>: All requests to <code>&lt;app&gt;.smallweb.run</code> will be served from the <code>~/smallweb.run/&lt;app&gt;</code> folder.</li>
<li><code>*.example.me</code> to <code>~/example.com</code>: All requests to <code>*.example.me</code> will be served from the <code>~/example.com</code> folder.</li>
</ul>
<p>The config is live-reloaded, so you can change it on the fly.</p>
<p>I hope this new system will allows advanced users to handle more advanced routing scenarios, while keeping the simplicity of the original system.</p>
<p>This change also means that the notion of a &quot;smallweb root&quot; is now deprecated. You can put your smallweb apps anywhere in your filesystem.</p>
<h2 id="smallweb-open" tabindex="-1"><a href="http://localhost/posts/v0.11/#smallweb-open" class="header-anchor"><code>smallweb open</code></a></h2>
<p>Smallweb open now works on top of directories.</p>
<p>To open the app from the current directory in your browser, you can run:</p>
<pre><code class="language-sh">smallweb open .
</code></pre>
<p>Or do something like this if you have a blog stored at <code>~/localhost/blog</code>:</p>
<pre><code class="language-sh">smallweb open ~/localhost/blog
</code></pre>
<h2 id="smallweb-create--%3E-smallweb-init" tabindex="-1"><a href="http://localhost/posts/v0.11/#smallweb-create--%3E-smallweb-init" class="header-anchor"><code>smallweb create</code> -&gt; <code>smallweb init</code></a></h2>
<p><code>smallweb create</code> was replaced by <code>smallweb init</code>.</p>
<p>If you want <code>smallweb init</code>, you'll get an interactive prompt to create a new project.</p>
<p>You can also skip the prompts by passing the appropriate args and flags.</p>
<pre><code class="language-sh">smallweb init ~/localhost/hono-app --template hono
</code></pre>
]]>
      </content:encoded>
      <pubDate>Wed, 17 Jul 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Smallweb 0.10 - Cron jobs are here!</title>
      <link>http://localhost/posts/v0.10/</link>
      <guid isPermaLink="false">http://localhost/posts/v0.10/</guid>
      <content:encoded>
        <![CDATA[<h2 id="smallweb-now-supports-cron-jobs" tabindex="-1"><a href="http://localhost/posts/v0.10/#smallweb-now-supports-cron-jobs" class="header-anchor">Smallweb now supports cron jobs</a></h2>
<p>Cron jobs were one of the key features missing from smallweb.
You can now defines them from the <code>smallweb.json[c]</code> file.</p>
<pre><code class="language-json">{
  &quot;crons&quot;: [
    {
      &quot;name&quot;: &quot;my-cron-job&quot;,
      &quot;schedule&quot;: &quot;0 0 * * *&quot;,
      &quot;command&quot;: &quot;echo&quot;,
      &quot;args&quot;: [&quot;hello world!&quot;]
    }
  ]
}
</code></pre>
<!-- more -->
<p>Cron jobs are defined by a name, a schedule, a command, and optional arguments.</p>
<p>The minimum schedule is <code>* * * * *</code> which means every minute. <a href="https://crontab.guru/">crontab.guru</a> is a great tool to help you define your schedule.</p>
<p>Additionally, two new commands were added to manage cron jobs:</p>
<ul>
<li><code>smallweb cron list</code> to list all cron jobs</li>
<li><code>smallweb cron trigger</code> to trigger a cron job manually</li>
</ul>
<p>Make sure to setup the completions for your shell to get the full experience.</p>
<p>More information can be found in the <a href="https://docs.smallweb.run/guides/cron.html">documentation</a>.</p>
<h2 id="smallweb-create-is-now-interactive" tabindex="-1"><a href="http://localhost/posts/v0.10/#smallweb-create-is-now-interactive" class="header-anchor"><code>smallweb create</code> is now interactive</a></h2>
<p>You can now just run <code>smallweb create</code> to initialize a new project.</p>
<p>It will ask you a few questions and generate a new project for you.
You can skip the questions by passing the <code>--name</code> and <code>--template</code> flags.</p>
<h2 id="what's-next%3F" tabindex="-1"><a href="http://localhost/posts/v0.10/#what's-next%3F" class="header-anchor">What's next?</a></h2>
<p>I want to focus on improving the logs experience in the next release.</p>
<p>Currently, all logs are grouped together, and there is no way to filter between:</p>
<ul>
<li>system logs (ex: http requests)</li>
<li>application logs (ex: stdout/stderr)</li>
</ul>
<p>The user should also be able to filter logs by domain, or application.</p>
<p>In order to achieve this, I'm thinking of emitting logs as json to stdout, and converting them to human readable format in the cli.</p>
<p>I also plan to work on:</p>
<ul>
<li>a landing page for smallweb</li>
<li>a demo video showcasing the features</li>
</ul>
]]>
      </content:encoded>
      <pubDate>Sat, 13 Jul 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Smallweb 0.9 - Improved Routing</title>
      <link>http://localhost/posts/v0.9/</link>
      <guid isPermaLink="false">http://localhost/posts/v0.9/</guid>
      <content:encoded>
        <![CDATA[<h2 id="updated-routing" tabindex="-1"><a href="http://localhost/posts/v0.9/#updated-routing" class="header-anchor">Updated Routing</a></h2>
<p>After a lot of feedback shared by community, the routing was rethinked from the
ground up. Thanks everyone for sharing your thoughts!</p>
<p>Here is what your smallweb root folder (which defaults to <code>~/smallweb</code>) should
now look like:</p>
<pre><code class="language-txt">~/smallweb/
â”œâ”€â”€ localhost
â”‚   â”œâ”€â”€ example
â”‚   â”‚   â””â”€â”€ main.ts
â”‚   â””â”€â”€ react
â”‚       â””â”€â”€ main.ts
â”œâ”€â”€ pomdtr.me
â”‚   â””â”€â”€ www
â”‚       â””â”€â”€ main.ts
â””â”€â”€ smallweb.run
    â”œâ”€â”€ www
    â”‚   â””â”€â”€ main.ts
    â”œâ”€â”€ assets
    â”‚   â””â”€â”€ main.ts
    â””â”€â”€ readme
        â””â”€â”€ main.ts
</code></pre>
<!-- more -->
<p>The first level of subfolder is the apex domain, and the second one is the
subdomain.</p>
<ul>
<li><code>https://assets.smallweb.run</code> will be routed to
<code>~/smallweb/smallweb.run/assets/</code></li>
<li><code>react.localhost</code> will be routed to <code>~/smallweb/localhost/react/</code></li>
</ul>
<p>Request targeting the apex domain will be automatically redirected to the <code>www</code>
subdomain.</p>
<p>You can read more about the design process in the
<a href="http://localhost/blog/routing-design.md">dedicated blog post</a>.</p>
<h2 id="smallweb-list" tabindex="-1"><a href="http://localhost/posts/v0.9/#smallweb-list" class="header-anchor">smallweb list</a></h2>
<p>The smallweb dump command was renamed to <code>smallweb list</code>.</p>
<p>Smallweb list supports both human and machine readable output (with a <code>--json</code>
flag).</p>
<p>You can filter by domain using the <code>--domain</code> flag.</p>
<h2 id="smallweb-open" tabindex="-1"><a href="http://localhost/posts/v0.9/#smallweb-open" class="header-anchor">smallweb open</a></h2>
<p>The <code>smallweb open</code> command can now open smallweb websites, even when your
current directory is not the root of a smallweb app.</p>
<p>Just pass the app name to the command:</p>
<pre><code class="language-sh">smallweb open react.localhost
</code></pre>
<p>The command provides completions, make sure to set them properly. You can get
shell specific instructions using the <code>smallweb help completion</code> command.</p>
]]>
      </content:encoded>
      <pubDate>Fri, 12 Jul 2024 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>Rethinking Smallweb Routing</title>
      <link>http://localhost/posts/routing-design/</link>
      <guid isPermaLink="false">http://localhost/posts/routing-design/</guid>
      <content:encoded>
        <![CDATA[<p>Smallweb <code>v0.8.0</code> was released yesterday, and it included the first smallweb
breaking change.</p>
<blockquote>
<p>The <code>~/www</code> convention was dropped, the defaut folder is now <code>~/smallweb</code></p>
<p>In addition to this change, the folder should now be named after the hostname:</p>
<ul>
<li>example.smallweb.run =&gt; ~/smallweb/example.smallweb.run/</li>
<li>pomdtr.me =&gt; ~/smallweb/pomdtr.me/</li>
<li>example.localhost =&gt; ~/smallweb/example.localhost/</li>
</ul>
</blockquote>
<p>This change was not really well received:</p>
<blockquote>
<p>I'm not a fan of the new hostname folder convention. It feels noisy.</p>
<p>I'm also a bit frustrated by this change, and this is my main gripe with it
too. And this &quot;ugliness&quot; is (for me) exacerbated by the fact that there's
going to be a lot of repetition if all my smallweb apps are <code>&lt;app&gt;.localhost</code>.
I would prefer a convention like <code>~/smallweb/localhost/example</code> mapping to
<code>example.localhost</code></p>
</blockquote>
<p>In this post, I'll try to address:</p>
<ul>
<li>the drawbacks of the previous convention</li>
<li>the options I've considered</li>
</ul>
<!-- more -->
<h2 id="why-a-change-was-needed" tabindex="-1"><a href="http://localhost/posts/routing-design/#why-a-change-was-needed" class="header-anchor">Why a change was needed</a></h2>
<p>The smallweb routing system was originally designed for a single usecase:
hosting a unlimited amount of websites locally, using <code>*.localhost</code> domains.</p>
<p>The convention was to:</p>
<ul>
<li>store all of your website in the smallweb root (<code>~/www</code> by default)</li>
<li>use the folder name has the subdomain</li>
</ul>
<p>So <code>~/www/example/</code> would be mapped to <code>https://example.localhost</code>.</p>
<p>As the project expanded, new usecases emerged for smallweb: hosting smallweb on
a raspberrypi, or even on a VPS from hetzner/digital ocean...</p>
<p>And the intitial design hold quite well with these usecases. You would just
assign a domain to your device (ex: <code>*.pomdtr.me</code>), and <code>~/www/example/</code> would
map to <code>https://example.pomdtr.me</code>.</p>
<p>But what if I wanted to assign multiple domains to a single machine ? If I route
both <code>*.pomdtr.me</code> and <code>*.smallweb.run</code> to my machine, <code>~/www/example</code> will
match both <code>https://example.pomdtr.me</code> and <code>https://example.smallweb.run</code>. This
is probably not what the user want in most cases.</p>
<h2 id="options-i've-considered" tabindex="-1"><a href="http://localhost/posts/routing-design/#options-i've-considered" class="header-anchor">Options I've considered</a></h2>
<p>Let's say we want to manage the following websites using smallweb.</p>
<ul>
<li><code>https://smallweb.run</code></li>
<li><code>https://readme.smallweb.run</code></li>
<li><code>https://assets.smallweb.run</code></li>
<li><code>https://pomdtr.me</code></li>
<li><code>https://example.localhost</code></li>
<li><code>https://react.localhost</code></li>
</ul>
<p>We'll assume that all of these websites are defined in a single <code>main.ts</code>.</p>
<h3 id="option-1%3A-not-using-the-folder-name" tabindex="-1"><a href="http://localhost/posts/routing-design/#option-1%3A-not-using-the-folder-name" class="header-anchor">Option 1: Not using the folder name</a></h3>
<p>We could just allow arbitrary folder names, and just use a CNAME at the root of
the app, specifying the domain name.</p>
<pre><code class="language-txt">assets.smallweb.run
</code></pre>
<p>It sounds like a fine solution, but it means that every smallweb website would
need to include it. I really want single-file websites to be able to exist, and
I feel like file based routing is a core feature of smallweb, so I did not go
with this option.</p>
<h3 id="option-2%3A-using-a-nested-structure" tabindex="-1"><a href="http://localhost/posts/routing-design/#option-2%3A-using-a-nested-structure" class="header-anchor">Option 2: Using a Nested structure</a></h3>
<pre><code class="language-txt">/
â”œâ”€â”€ localhost
â”‚   â”œâ”€â”€ example
â”‚   â”‚   â””â”€â”€ main.ts
â”‚   â””â”€â”€ react
â”‚       â””â”€â”€ main.ts
â”œâ”€â”€ me
â”‚   â””â”€â”€ pomdtr
â”‚       â””â”€â”€ main.ts
â””â”€â”€ run
    â””â”€â”€ smallweb
        â”œâ”€â”€ main.ts
        â”œâ”€â”€ assets
        â”‚   â””â”€â”€ main.ts
        â””â”€â”€ readme
            â””â”€â”€ main.ts
</code></pre>
<p>Of course, this is not acceptable. If we look at the <code>/run/smallweb</code> folder, we
can see that it contains both:</p>
<ul>
<li>the code of the <code>https://smallweb.run</code> homepage at his root.</li>
<li>the code of <code>readme</code> and <code>assets</code> subdomains</li>
</ul>
<p>If we used a git repository to manage each of those websites, this would quickly
become a mess.</p>
<p>To counter this, we can add a convention: if the request target a root domain,
it will be automatically redirected to the <code>www</code> domain.</p>
<pre><code class="language-txt">/
â”œâ”€â”€ localhost
â”‚   â”œâ”€â”€ example
â”‚   â”‚   â””â”€â”€ main.ts
â”‚   â””â”€â”€ react
â”‚       â””â”€â”€ main.ts
â”œâ”€â”€ me
â”‚   â””â”€â”€ pomdtr
â”‚       â””â”€â”€ www
â”‚           â””â”€â”€ main.ts
â””â”€â”€ run
    â””â”€â”€ smallweb
        â”œâ”€â”€ assets
        â”‚   â””â”€â”€ main.ts
        â”œâ”€â”€ readme
        â”‚   â””â”€â”€ main.ts
        â””â”€â”€ www
            â””â”€â”€ main.ts
</code></pre>
<p>This looks better! However, it still feels like we have some uncessary nesting.</p>
<p>For example, the <code>/run</code> folder only has one subfolder: <code>/run/smallweb</code>. Folders
are supposed to group related websites, but websites sharing the same TLD
probably have nothing in common.</p>
<p>Even worse, <code>pomdtr.me</code> requires 3 (!!!) level of nesting: <code>/me/pomdtr/www</code>.</p>
<h3 id="option-3%3A-2-level-structure" tabindex="-1"><a href="http://localhost/posts/routing-design/#option-3%3A-2-level-structure" class="header-anchor">Option 3: 2-level structure</a></h3>
<p>Instead of splitting on <code>.</code>, we'll use the apex domain as the first level of
subfolder, and the subdomain as the second one.</p>
<p>If a request target the apex domain, will automatically redirect it to the <code>www</code>
subdomain.</p>
<pre><code class="language-txt">/
â”œâ”€â”€ localhost
â”‚   â”œâ”€â”€ example
â”‚   â”‚   â””â”€â”€ main.ts
â”‚   â””â”€â”€ react
â”‚       â””â”€â”€ main.ts
â”œâ”€â”€ pomdtr.me
â”‚   â””â”€â”€ www
â”‚       â””â”€â”€ main.ts
â””â”€â”€ smallweb.run
    â”œâ”€â”€ www
    â”‚   â””â”€â”€ main.ts
    â”œâ”€â”€ assets
    â”‚   â””â”€â”€ main.ts
    â””â”€â”€ readme
        â””â”€â”€ main.ts
</code></pre>
<p>We still have some uncessary nesting (<code>pomdtr/www</code>), but we get meaningful
groups in exchange.</p>
<p>Here the folder structure kind of reflect the process of updating DNS records in
cloudflare.</p>
<h3 id="option-4%3A-flat-structure" tabindex="-1"><a href="http://localhost/posts/routing-design/#option-4%3A-flat-structure" class="header-anchor">Option 4: Flat structure</a></h3>
<p>Let's drop the nesting, and use the domain name as the folder name:</p>
<pre><code class="language-txt">/
â”œâ”€â”€ assets.smallweb.run
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ example.localhost
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ pomdtr.me
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ react.localhost
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ readme.smallweb.run
â”‚   â””â”€â”€ main.ts
â””â”€â”€ smallweb.run
    â””â”€â”€ main.ts
</code></pre>
<p>Using the domain name as the folder looks kind of ugly, but it avoid the nested
folders problem entirely. One big advantage of this architecture is that you can
create a new website from a git repository by just doing:</p>
<pre><code class="language-sh">git clone &lt;repo-url&gt; &lt;hostname&gt;
</code></pre>
<p>My main gripe with it (outside of the noisy folder names), is that related
websites appears in different places in the file tree (ex: <code>react.localhost</code> and
<code>example.localhost</code> are not next to each others).</p>
<p>We can fix it by reversing the folder names:</p>
<pre><code class="language-txt">/
â”œâ”€â”€ localhost.example
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ localhost.react
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ me.pomdtr
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ run.smallweb
â”‚   â””â”€â”€ main.ts
â”œâ”€â”€ run.smallweb.assets
â”‚   â””â”€â”€ main.ts
â””â”€â”€ run.smallweb.readme
    â””â”€â”€ main.ts
</code></pre>
<p>I quite like this compromise, but I'm not sure it would address the noisyness
reported by the community.</p>
<h2 id="what-do-you-think-%3F" tabindex="-1"><a href="http://localhost/posts/routing-design/#what-do-you-think-%3F" class="header-anchor">What do you think ?</a></h2>
<p>Here are the two options I'm considering as default:</p>
<ol>
<li>2-level structure</li>
<li>Reversed Flat structure</li>
</ol>
<p>Writing this article, I've come to gain more appreciation of the two
level-structure, as it mirrors the process of setting up DNS record in your
domain registrar. However, the reversed flat structure is far more
straightforward, which is a plus in my book.</p>
<p>I wonder if we should support both options (remix-style).</p>
<p>I would love to hear your thoughts on all of this. Make sure to join the
<a href="https://discord.gg/36jsj3rS">discord channel</a> if you want your voice to be
heard.</p>
]]>
      </content:encoded>
      <pubDate>Thu, 11 Jul 2024 00:00:00 GMT</pubDate>
    </item>
  </channel>
</rss>