{"version":"https://jsonfeed.org/version/1","title":"Smallweb Blog","home_page_url":"http://localhost/","feed_url":"http://localhost/feed.json","description":"The latest new from Smallweb","items":[{"id":"http://localhost/posts/v0.11/","url":"http://localhost/posts/v0.11/","title":"Smallweb 0.11 - Global config and new routing","content_html":"<h2 id=\"a-new-(optional)-global-config\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.11/#a-new-(optional)-global-config\" class=\"header-anchor\">A new (optional) global config</a></h2>\n<p>You can now configure the smallweb host, port, and other global settings in a <code>~/.config/smallweb/config.json</code> file.</p>\n<p>Here is the implicit default configuration if the file does not exist:</p>\n<pre><code class=\"language-json\">{\n    &quot;host&quot;: &quot;127.0.0.1&quot;,\n    &quot;port&quot;: 7777,\n    &quot;domains&quot;: {\n        &quot;*.localhost&quot;: &quot;~/localhost/*&quot;\n    },\n    &quot;env&quot;: {\n        &quot;DENO_TLS_CA_STORE&quot;: &quot;system&quot;\n    }\n}\n</code></pre>\n<!-- more -->\n<p>Smallweb also supports the following environment variables:</p>\n<ul>\n<li><code>SMALLWEB_HOST</code></li>\n<li><code>SMALLWEB_PORT</code></li>\n</ul>\n<h2 id=\"config-based-routing\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.11/#config-based-routing\" class=\"header-anchor\">Config Based Routing</a></h2>\n<p>You might have noticed the new <code>domains</code> key in the global config.</p>\n<p>It's part of a new routing system that allows you to map domains to folders in your filesystem.</p>\n<p>For example, you can map:</p>\n<ul>\n<li><code>pomdtr.me</code> to <code>~/pomdtr.me</code>: All requests to <code>pomdtr.me</code> will be served from the <code>~/pomdtr.me</code> folder.</li>\n<li><code>*.smallweb.run</code> to <code>~/smallweb.run/*</code>: All requests to <code>&lt;app&gt;.smallweb.run</code> will be served from the <code>~/smallweb.run/&lt;app&gt;</code> folder.</li>\n<li><code>*.example.me</code> to <code>~/example.com</code>: All requests to <code>*.example.me</code> will be served from the <code>~/example.com</code> folder.</li>\n</ul>\n<p>The config is live-reloaded, so you can change it on the fly.</p>\n<p>I hope this new system will allows advanced users to handle more advanced routing scenarios, while keeping the simplicity of the original system.</p>\n<p>This change also means that the notion of a &quot;smallweb root&quot; is now deprecated. You can put your smallweb apps anywhere in your filesystem.</p>\n<h2 id=\"smallweb-open\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.11/#smallweb-open\" class=\"header-anchor\"><code>smallweb open</code></a></h2>\n<p>Smallweb open now works on top of directories.</p>\n<p>To open the app from the current directory in your browser, you can run:</p>\n<pre><code class=\"language-sh\">smallweb open .\n</code></pre>\n<p>Or do something like this if you have a blog stored at <code>~/localhost/blog</code>:</p>\n<pre><code class=\"language-sh\">smallweb open ~/localhost/blog\n</code></pre>\n<h2 id=\"smallweb-create--%3E-smallweb-init\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.11/#smallweb-create--%3E-smallweb-init\" class=\"header-anchor\"><code>smallweb create</code> -&gt; <code>smallweb init</code></a></h2>\n<p><code>smallweb create</code> was replaced by <code>smallweb init</code>.</p>\n<p>If you want <code>smallweb init</code>, you'll get an interactive prompt to create a new project.</p>\n<p>You can also skip the prompts by passing the appropriate args and flags.</p>\n<pre><code class=\"language-sh\">smallweb init ~/localhost/hono-app --template hono\n</code></pre>\n","date_published":"Wed, 17 Jul 2024 00:00:00 GMT"},{"id":"http://localhost/posts/v0.10/","url":"http://localhost/posts/v0.10/","title":"Smallweb 0.10 - Cron jobs are here!","content_html":"<h2 id=\"smallweb-now-supports-cron-jobs\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.10/#smallweb-now-supports-cron-jobs\" class=\"header-anchor\">Smallweb now supports cron jobs</a></h2>\n<p>Cron jobs were one of the key features missing from smallweb.\nYou can now defines them from the <code>smallweb.json[c]</code> file.</p>\n<pre><code class=\"language-json\">{\n  &quot;crons&quot;: [\n    {\n      &quot;name&quot;: &quot;my-cron-job&quot;,\n      &quot;schedule&quot;: &quot;0 0 * * *&quot;,\n      &quot;command&quot;: &quot;echo&quot;,\n      &quot;args&quot;: [&quot;hello world!&quot;]\n    }\n  ]\n}\n</code></pre>\n<!-- more -->\n<p>Cron jobs are defined by a name, a schedule, a command, and optional arguments.</p>\n<p>The minimum schedule is <code>* * * * *</code> which means every minute. <a href=\"https://crontab.guru/\">crontab.guru</a> is a great tool to help you define your schedule.</p>\n<p>Additionally, two new commands were added to manage cron jobs:</p>\n<ul>\n<li><code>smallweb cron list</code> to list all cron jobs</li>\n<li><code>smallweb cron trigger</code> to trigger a cron job manually</li>\n</ul>\n<p>Make sure to setup the completions for your shell to get the full experience.</p>\n<p>More information can be found in the <a href=\"https://docs.smallweb.run/guides/cron.html\">documentation</a>.</p>\n<h2 id=\"smallweb-create-is-now-interactive\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.10/#smallweb-create-is-now-interactive\" class=\"header-anchor\"><code>smallweb create</code> is now interactive</a></h2>\n<p>You can now just run <code>smallweb create</code> to initialize a new project.</p>\n<p>It will ask you a few questions and generate a new project for you.\nYou can skip the questions by passing the <code>--name</code> and <code>--template</code> flags.</p>\n<h2 id=\"what's-next%3F\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.10/#what's-next%3F\" class=\"header-anchor\">What's next?</a></h2>\n<p>I want to focus on improving the logs experience in the next release.</p>\n<p>Currently, all logs are grouped together, and there is no way to filter between:</p>\n<ul>\n<li>system logs (ex: http requests)</li>\n<li>application logs (ex: stdout/stderr)</li>\n</ul>\n<p>The user should also be able to filter logs by domain, or application.</p>\n<p>In order to achieve this, I'm thinking of emitting logs as json to stdout, and converting them to human readable format in the cli.</p>\n<p>I also plan to work on:</p>\n<ul>\n<li>a landing page for smallweb</li>\n<li>a demo video showcasing the features</li>\n</ul>\n","date_published":"Sat, 13 Jul 2024 00:00:00 GMT"},{"id":"http://localhost/posts/v0.9/","url":"http://localhost/posts/v0.9/","title":"Smallweb 0.9 - Improved Routing","content_html":"<h2 id=\"updated-routing\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.9/#updated-routing\" class=\"header-anchor\">Updated Routing</a></h2>\n<p>After a lot of feedback shared by community, the routing was rethinked from the\nground up. Thanks everyone for sharing your thoughts!</p>\n<p>Here is what your smallweb root folder (which defaults to <code>~/smallweb</code>) should\nnow look like:</p>\n<pre><code class=\"language-txt\">~/smallweb/\n├── localhost\n│   ├── example\n│   │   └── main.ts\n│   └── react\n│       └── main.ts\n├── pomdtr.me\n│   └── www\n│       └── main.ts\n└── smallweb.run\n    ├── www\n    │   └── main.ts\n    ├── assets\n    │   └── main.ts\n    └── readme\n        └── main.ts\n</code></pre>\n<!-- more -->\n<p>The first level of subfolder is the apex domain, and the second one is the\nsubdomain.</p>\n<ul>\n<li><code>https://assets.smallweb.run</code> will be routed to\n<code>~/smallweb/smallweb.run/assets/</code></li>\n<li><code>react.localhost</code> will be routed to <code>~/smallweb/localhost/react/</code></li>\n</ul>\n<p>Request targeting the apex domain will be automatically redirected to the <code>www</code>\nsubdomain.</p>\n<p>You can read more about the design process in the\n<a href=\"http://localhost/blog/routing-design.md\">dedicated blog post</a>.</p>\n<h2 id=\"smallweb-list\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.9/#smallweb-list\" class=\"header-anchor\">smallweb list</a></h2>\n<p>The smallweb dump command was renamed to <code>smallweb list</code>.</p>\n<p>Smallweb list supports both human and machine readable output (with a <code>--json</code>\nflag).</p>\n<p>You can filter by domain using the <code>--domain</code> flag.</p>\n<h2 id=\"smallweb-open\" tabindex=\"-1\"><a href=\"http://localhost/posts/v0.9/#smallweb-open\" class=\"header-anchor\">smallweb open</a></h2>\n<p>The <code>smallweb open</code> command can now open smallweb websites, even when your\ncurrent directory is not the root of a smallweb app.</p>\n<p>Just pass the app name to the command:</p>\n<pre><code class=\"language-sh\">smallweb open react.localhost\n</code></pre>\n<p>The command provides completions, make sure to set them properly. You can get\nshell specific instructions using the <code>smallweb help completion</code> command.</p>\n","date_published":"Fri, 12 Jul 2024 00:00:00 GMT"},{"id":"http://localhost/posts/routing-design/","url":"http://localhost/posts/routing-design/","title":"Rethinking Smallweb Routing","content_html":"<p>Smallweb <code>v0.8.0</code> was released yesterday, and it included the first smallweb\nbreaking change.</p>\n<blockquote>\n<p>The <code>~/www</code> convention was dropped, the defaut folder is now <code>~/smallweb</code></p>\n<p>In addition to this change, the folder should now be named after the hostname:</p>\n<ul>\n<li>example.smallweb.run =&gt; ~/smallweb/example.smallweb.run/</li>\n<li>pomdtr.me =&gt; ~/smallweb/pomdtr.me/</li>\n<li>example.localhost =&gt; ~/smallweb/example.localhost/</li>\n</ul>\n</blockquote>\n<p>This change was not really well received:</p>\n<blockquote>\n<p>I'm not a fan of the new hostname folder convention. It feels noisy.</p>\n<p>I'm also a bit frustrated by this change, and this is my main gripe with it\ntoo. And this &quot;ugliness&quot; is (for me) exacerbated by the fact that there's\ngoing to be a lot of repetition if all my smallweb apps are <code>&lt;app&gt;.localhost</code>.\nI would prefer a convention like <code>~/smallweb/localhost/example</code> mapping to\n<code>example.localhost</code></p>\n</blockquote>\n<p>In this post, I'll try to address:</p>\n<ul>\n<li>the drawbacks of the previous convention</li>\n<li>the options I've considered</li>\n</ul>\n<!-- more -->\n<h2 id=\"why-a-change-was-needed\" tabindex=\"-1\"><a href=\"http://localhost/posts/routing-design/#why-a-change-was-needed\" class=\"header-anchor\">Why a change was needed</a></h2>\n<p>The smallweb routing system was originally designed for a single usecase:\nhosting a unlimited amount of websites locally, using <code>*.localhost</code> domains.</p>\n<p>The convention was to:</p>\n<ul>\n<li>store all of your website in the smallweb root (<code>~/www</code> by default)</li>\n<li>use the folder name has the subdomain</li>\n</ul>\n<p>So <code>~/www/example/</code> would be mapped to <code>https://example.localhost</code>.</p>\n<p>As the project expanded, new usecases emerged for smallweb: hosting smallweb on\na raspberrypi, or even on a VPS from hetzner/digital ocean...</p>\n<p>And the intitial design hold quite well with these usecases. You would just\nassign a domain to your device (ex: <code>*.pomdtr.me</code>), and <code>~/www/example/</code> would\nmap to <code>https://example.pomdtr.me</code>.</p>\n<p>But what if I wanted to assign multiple domains to a single machine ? If I route\nboth <code>*.pomdtr.me</code> and <code>*.smallweb.run</code> to my machine, <code>~/www/example</code> will\nmatch both <code>https://example.pomdtr.me</code> and <code>https://example.smallweb.run</code>. This\nis probably not what the user want in most cases.</p>\n<h2 id=\"options-i've-considered\" tabindex=\"-1\"><a href=\"http://localhost/posts/routing-design/#options-i've-considered\" class=\"header-anchor\">Options I've considered</a></h2>\n<p>Let's say we want to manage the following websites using smallweb.</p>\n<ul>\n<li><code>https://smallweb.run</code></li>\n<li><code>https://readme.smallweb.run</code></li>\n<li><code>https://assets.smallweb.run</code></li>\n<li><code>https://pomdtr.me</code></li>\n<li><code>https://example.localhost</code></li>\n<li><code>https://react.localhost</code></li>\n</ul>\n<p>We'll assume that all of these websites are defined in a single <code>main.ts</code>.</p>\n<h3 id=\"option-1%3A-not-using-the-folder-name\" tabindex=\"-1\"><a href=\"http://localhost/posts/routing-design/#option-1%3A-not-using-the-folder-name\" class=\"header-anchor\">Option 1: Not using the folder name</a></h3>\n<p>We could just allow arbitrary folder names, and just use a CNAME at the root of\nthe app, specifying the domain name.</p>\n<pre><code class=\"language-txt\">assets.smallweb.run\n</code></pre>\n<p>It sounds like a fine solution, but it means that every smallweb website would\nneed to include it. I really want single-file websites to be able to exist, and\nI feel like file based routing is a core feature of smallweb, so I did not go\nwith this option.</p>\n<h3 id=\"option-2%3A-using-a-nested-structure\" tabindex=\"-1\"><a href=\"http://localhost/posts/routing-design/#option-2%3A-using-a-nested-structure\" class=\"header-anchor\">Option 2: Using a Nested structure</a></h3>\n<pre><code class=\"language-txt\">/\n├── localhost\n│   ├── example\n│   │   └── main.ts\n│   └── react\n│       └── main.ts\n├── me\n│   └── pomdtr\n│       └── main.ts\n└── run\n    └── smallweb\n        ├── main.ts\n        ├── assets\n        │   └── main.ts\n        └── readme\n            └── main.ts\n</code></pre>\n<p>Of course, this is not acceptable. If we look at the <code>/run/smallweb</code> folder, we\ncan see that it contains both:</p>\n<ul>\n<li>the code of the <code>https://smallweb.run</code> homepage at his root.</li>\n<li>the code of <code>readme</code> and <code>assets</code> subdomains</li>\n</ul>\n<p>If we used a git repository to manage each of those websites, this would quickly\nbecome a mess.</p>\n<p>To counter this, we can add a convention: if the request target a root domain,\nit will be automatically redirected to the <code>www</code> domain.</p>\n<pre><code class=\"language-txt\">/\n├── localhost\n│   ├── example\n│   │   └── main.ts\n│   └── react\n│       └── main.ts\n├── me\n│   └── pomdtr\n│       └── www\n│           └── main.ts\n└── run\n    └── smallweb\n        ├── assets\n        │   └── main.ts\n        ├── readme\n        │   └── main.ts\n        └── www\n            └── main.ts\n</code></pre>\n<p>This looks better! However, it still feels like we have some uncessary nesting.</p>\n<p>For example, the <code>/run</code> folder only has one subfolder: <code>/run/smallweb</code>. Folders\nare supposed to group related websites, but websites sharing the same TLD\nprobably have nothing in common.</p>\n<p>Even worse, <code>pomdtr.me</code> requires 3 (!!!) level of nesting: <code>/me/pomdtr/www</code>.</p>\n<h3 id=\"option-3%3A-2-level-structure\" tabindex=\"-1\"><a href=\"http://localhost/posts/routing-design/#option-3%3A-2-level-structure\" class=\"header-anchor\">Option 3: 2-level structure</a></h3>\n<p>Instead of splitting on <code>.</code>, we'll use the apex domain as the first level of\nsubfolder, and the subdomain as the second one.</p>\n<p>If a request target the apex domain, will automatically redirect it to the <code>www</code>\nsubdomain.</p>\n<pre><code class=\"language-txt\">/\n├── localhost\n│   ├── example\n│   │   └── main.ts\n│   └── react\n│       └── main.ts\n├── pomdtr.me\n│   └── www\n│       └── main.ts\n└── smallweb.run\n    ├── www\n    │   └── main.ts\n    ├── assets\n    │   └── main.ts\n    └── readme\n        └── main.ts\n</code></pre>\n<p>We still have some uncessary nesting (<code>pomdtr/www</code>), but we get meaningful\ngroups in exchange.</p>\n<p>Here the folder structure kind of reflect the process of updating DNS records in\ncloudflare.</p>\n<h3 id=\"option-4%3A-flat-structure\" tabindex=\"-1\"><a href=\"http://localhost/posts/routing-design/#option-4%3A-flat-structure\" class=\"header-anchor\">Option 4: Flat structure</a></h3>\n<p>Let's drop the nesting, and use the domain name as the folder name:</p>\n<pre><code class=\"language-txt\">/\n├── assets.smallweb.run\n│   └── main.ts\n├── example.localhost\n│   └── main.ts\n├── pomdtr.me\n│   └── main.ts\n├── react.localhost\n│   └── main.ts\n├── readme.smallweb.run\n│   └── main.ts\n└── smallweb.run\n    └── main.ts\n</code></pre>\n<p>Using the domain name as the folder looks kind of ugly, but it avoid the nested\nfolders problem entirely. One big advantage of this architecture is that you can\ncreate a new website from a git repository by just doing:</p>\n<pre><code class=\"language-sh\">git clone &lt;repo-url&gt; &lt;hostname&gt;\n</code></pre>\n<p>My main gripe with it (outside of the noisy folder names), is that related\nwebsites appears in different places in the file tree (ex: <code>react.localhost</code> and\n<code>example.localhost</code> are not next to each others).</p>\n<p>We can fix it by reversing the folder names:</p>\n<pre><code class=\"language-txt\">/\n├── localhost.example\n│   └── main.ts\n├── localhost.react\n│   └── main.ts\n├── me.pomdtr\n│   └── main.ts\n├── run.smallweb\n│   └── main.ts\n├── run.smallweb.assets\n│   └── main.ts\n└── run.smallweb.readme\n    └── main.ts\n</code></pre>\n<p>I quite like this compromise, but I'm not sure it would address the noisyness\nreported by the community.</p>\n<h2 id=\"what-do-you-think-%3F\" tabindex=\"-1\"><a href=\"http://localhost/posts/routing-design/#what-do-you-think-%3F\" class=\"header-anchor\">What do you think ?</a></h2>\n<p>Here are the two options I'm considering as default:</p>\n<ol>\n<li>2-level structure</li>\n<li>Reversed Flat structure</li>\n</ol>\n<p>Writing this article, I've come to gain more appreciation of the two\nlevel-structure, as it mirrors the process of setting up DNS record in your\ndomain registrar. However, the reversed flat structure is far more\nstraightforward, which is a plus in my book.</p>\n<p>I wonder if we should support both options (remix-style).</p>\n<p>I would love to hear your thoughts on all of this. Make sure to join the\n<a href=\"https://discord.gg/36jsj3rS\">discord channel</a> if you want your voice to be\nheard.</p>\n","date_published":"Thu, 11 Jul 2024 00:00:00 GMT"}]}